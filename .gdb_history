p &(huart->Instance->CR3 )
print Timeout 
print tickstart 
print/x Timeout 
s
p/x sizeof(huart2)
x /44x huart2
x /44x &huart2
x /44d &huart2
p sizeof(huart2)
x /4x &huart2
x /4b &huart2
x /68b &huart2
q
c
p sizeof(huart)
p sizeof(*huart)
x /68x &huart
x /68x huart
x /68b huart
x /90b huart
disas UART_WaitOnFlagUntilTimeout 
s
q
si
disas HAL_UART_Transmit
b *0x8008e0esi
c
si
print huart
print *huart
print &huart
si
print &huart
si
print &huart
q
print &huart
info files
x /64x *.data
x /64x *data
x /64x .data
x /64x *20000000
x /64x *0x20000000
x /64x *0x20000adc
x /64x 0x20000adc
x /64x 0x20000000
info files
p/x &huart
p/x huart
p/x *huart
x /68x huart
x /10x $psp
info reg

x /16x $msp
disas HAL_UART_Transmit
p $r7
p/x $r7
x /16x $psp
x /16x $msp
x $psp
n
q
q
x /16x $msp
x /16x $msp
si
p/x *0x20001140
p/x **0x20001140
si
break *0x800ac42
c
si
p/x *0x20001140
p/x **0x20001140
p/x &huart2
q

q
print/x *(uint8_t *)0xE000ED28
p/x *0xE000ED34
q
p/x *0xE000ED34
p/x &huart2
c
p/x *0xE000ED34
print/x *(uint8_t *)0xE000ED28
print USART2_CR1
print USART2
print $USART2
print *USART2
 qq
q
q
print/x *(uint8_t *)0xE000ED28
print/x *(uint8_t *)0xE000ED29
print/x *(uint16_t *)0xE000ED2A
 print/x *(uint32_t *) 0xE000ED28
p/a *(uint32_t[8] *)$psp
p/a *(uint32_t[8] *)$msp
q
q
q
n
q
print curr_task->id 
print next_ready_task->id 
s
break list.c:13
c
print head->task->id 
print curr->task->id 
print curr->task->priority 
print task->priority 
s
c
q
c
p curr->next 
p/x curr
p curr
x /64x curr
p/x curr->task 
p/x curr->task->id 
n
p curr
p curr->task 
p curr->task->priority 
s
print task->id 
n
n
p curr
n
print/x *(uint8_t *)0xE000ED28
p/x 0xE000ED34
q
p/x 0xE000ED34
p/x *0xE000ED34
q
p/x task_node 
p/x task_node->task 
x /64x task_node 
print task
print task1
print task2
print task3
print task1->stack_bottom 
print task2->stack_bottom 
print task3->stack_bottom 
print head 
print *head 
print *head->task 
print *head->next 
x /4x *0x20002600
x /4x 0x20002600
x /4x *0x20002600
p/x prev 
print task_node 
x /4x task_node 
p/x task
p/x task->id 
print prev
print prev->task
print prev->task->id
x /4x *0x20002600
x /4x 0x20002600
n
q
p/x allocated_start 
p/t *0xE000EDA0
p/t (uintt_8) (*0xE000EDA0)
p/t (uint_8) (*0xE000EDA0)
p/t (uint8_t) (*0xE000EDA0)
p/t (uint8_t) (*0xE000EDA0) >> 8
p/t (uint8_t) ((*0xE000EDA0) >> 8)
p/x pool_start 
n
p/t (uint8_t) ((*0xE000EDA0) >> 8)
x /64x pool_start 
q
print region_num 
print region_start_addr 
print/x region_start_addr 
p/t (uint8_t) ((*0xE000EDA0) >> 8)
s
p/t (uint8_t) ((*0xE000EDA0) >> 8)
n
p subregion_index 
p/t (uint8_t) ((*0xE000EDA0) >> 8)
s
p/t (uint8_t) ((*0xE000EDA0) >> 8)
p/x curr_srd 
p/t curr_srd 
p/t curr_srd 
s
s
finish
p/t (uint8_t) ((*0xE000EDA0) >> 8)
p/t (uint8_t) ((*0xE000EDA0) >> 8)
n
nn
n
finish
n
n
p/t (uint8_t) ((*0xE000EDA0) >> 8)
p/x task_node 
p/x task_node->task 
n
q
p/x block
c
q
p/x block
p/x (block_t*) ((char*)block + (8 * block_size));
p/x (block_t*) ((char*)block + (8 * block_size))
p num_blocks / 8
p num_blocks 
q
c
q
p/t (uint8_t) ((*0xE000EDA0) >> 8)
n
p/t (uint8_t) ((*0xE000EDA0) >> 8)
finish
p/x allocated_start 
q
c
q
c
p/t (uint8_t) ((*0xE000EDA0) >> 8)
print region_num 
p/x region_start_addr 
p/x region_num 
p/x (region_start_addr - pool_start )
p/x (region_start_addr - pool_start) / pool->block
p/x (region_start_addr - pool_start) / pool->block_size 
q
q
p/x region_num 
p/t (uint8_t) ((*0xE000EDA0) >> 8)
n
p/t (uint8_t) ((*0xE000EDA0) >> 8)
break 142
c
p/t new_srd 
p/t (uint8_t) ((*0xE000EDA0) >> 8)
n
p/t new_srd 
p/t (uint8_t) ((*0xE000EDA0) >> 8)
q
q
c
q
