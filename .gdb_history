finish
f
f
finish
print/x *0xE000ED34
q
print mutex->task->id 
n
print get_current_task()
n
q
n
s
si
s
s
n
p id
p/x i
p/x id
p/x param 
p/x &snprintf_buffer 
p/x LOG_MESSAGE_SIZE
s
finish
q
p/x &snprintf_buffer 
p/x snprintf_buffer 
disas snprintf
si
si
si
si
s
si
break 0x800c20e
break *0x800c20e
c
si
si
sp
si
si
si
disas snprintf
finish
q
p/x &snprintf_buffer 
p/x &uart_buffer 
qq
y
q
p/x &snprintf_buffer 
q
p/x &snprintf_buffer 
n
q
p/x &snprintf_buffer 
p/x &uart_buffer 
print SNPRINTF_BUFFER_ADDRESS
print snprintf_buffer 
print *snprintf_buffer 
n
print/x *0xE000ED34
print &curr_task 
print &curr_task->id
print &(curr_task->id)
print curr_task 
print &huart2 
print huart2 
print *0x20001048
print/x *0x20001
print **0x20001048
p/x **0x20001048
print/x *(uint8_t *)0xE000ED28
print/t *(uint8_t *)0xE000ED28
print/t *(uint32_t *)0xE000ED2C
p/x $lr&(1<<2)
p/a *(uint32_t[8] *)$psp
p/a *(uint32_t[8] *)$msp
p/x $ipsr
q
q
print/x *(uint8_t *)0xE000ED28
p/x *0xE000ED34
print mutex
print curr_ta
print mutex->task
print mutex->task->id
s
finish
q
print curr->task->priority 
print curr
n
n
p/x There's an old saying in Tennessee—I know it's in Texas, probably in Tennessee—that says, 'Fool me once, shame on... shame on you. Fool me—you can't get fooled again
p/x *0xE000ED28
p/x *0xE000ED34
x /64x pool->free_list 
q
c
n
x /64x pool->free_list 
n
x /64x pool->free_list 
n
p/x allocated_start 
x /64x allocated_start 
s
n
n
n
1
q
print snprintf
print snprintf_buffer 
print/x snprintf_buffer 
p/x id
s
n
p/x str
p/x *str
x/64x str
x/64x &str
print uart_buffer 
s
s
s
print huart2 
print &huart2 
finish
q
c
n
x /64x huart
x /64x huart2
p/x huart2
info reg
n
break 1156
c
break 1163
c
n
b 1177
c
print huart->TxXferCount 
n
c
p/x *0xE000ED34
q
c
n
p/x *0xE000ED34
q
c
p &(huart->gState )
p &(huart->RxState )
p &(huart->Instance )
p &(huart->Instance->CR1 )
p &(huart->Instance->CR2 )
p &(huart->Instance->CR3 )
print Timeout 
print tickstart 
print/x Timeout 
s
p/x sizeof(huart2)
x /44x huart2
x /44x &huart2
x /44d &huart2
p sizeof(huart2)
x /4x &huart2
x /4b &huart2
x /68b &huart2
q
c
p sizeof(huart)
p sizeof(*huart)
x /68x &huart
x /68x huart
x /68b huart
x /90b huart
disas UART_WaitOnFlagUntilTimeout 
s
q
si
disas HAL_UART_Transmit
b *0x8008e0esi
c
si
print huart
print *huart
print &huart
si
print &huart
si
print &huart
q
print &huart
info files
x /64x *.data
x /64x *data
x /64x .data
x /64x *20000000
x /64x *0x20000000
x /64x *0x20000adc
x /64x 0x20000adc
x /64x 0x20000000
info files
p/x &huart
p/x huart
p/x *huart
x /68x huart
x /10x $psp
info reg

x /16x $msp
disas HAL_UART_Transmit
p $r7
p/x $r7
x /16x $psp
x /16x $msp
x $psp
n
q
q
x /16x $msp
x /16x $msp
si
p/x *0x20001140
p/x **0x20001140
si
break *0x800ac42
c
si
p/x *0x20001140
p/x **0x20001140
p/x &huart2
q

q
print/x *(uint8_t *)0xE000ED28
p/x *0xE000ED34
q
p/x *0xE000ED34
p/x &huart2
c
p/x *0xE000ED34
print/x *(uint8_t *)0xE000ED28
print USART2_CR1
print USART2
print $USART2
print *USART2
 qq
q
